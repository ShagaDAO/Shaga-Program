/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * @category Instructions
 * @category UpdateShagaState
 * @category generated
 */
export type UpdateShagaStateInstructionArgs = {
  newShagaAuthority: beet.COption<web3.PublicKey>
  feeDestination: beet.COption<web3.PublicKey>
  feeBasisPoints: beet.COption<number>
  isPaused: beet.COption<boolean>
}
/**
 * @category Instructions
 * @category UpdateShagaState
 * @category generated
 */
export const updateShagaStateStruct = new beet.FixableBeetArgsStruct<
  UpdateShagaStateInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['newShagaAuthority', beet.coption(beetSolana.publicKey)],
    ['feeDestination', beet.coption(beetSolana.publicKey)],
    ['feeBasisPoints', beet.coption(beet.u32)],
    ['isPaused', beet.coption(beet.bool)],
  ],
  'UpdateShagaStateInstructionArgs'
)
/**
 * Accounts required by the _updateShagaState_ instruction
 *
 * @property [_writable_, **signer**] shagaAuthority
 * @property [_writable_] shagaState
 * @category Instructions
 * @category UpdateShagaState
 * @category generated
 */
export type UpdateShagaStateInstructionAccounts = {
  shagaAuthority: web3.PublicKey
  shagaState: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateShagaStateInstructionDiscriminator = [
  203, 163, 9, 25, 253, 108, 72, 57,
]

/**
 * Creates a _UpdateShagaState_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateShagaState
 * @category generated
 */
export function createUpdateShagaStateInstruction(
  accounts: UpdateShagaStateInstructionAccounts,
  args: UpdateShagaStateInstructionArgs,
  programId = new web3.PublicKey('HQeckNoXMczA5AtgKKWmLzQPT4Wcm6YBjeHCrRp2XLF1')
) {
  const [data] = updateShagaStateStruct.serialize({
    instructionDiscriminator: updateShagaStateInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.shagaAuthority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.shagaState,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
